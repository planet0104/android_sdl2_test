brainfuck:
> 递增数据指针
< 递减数据指针
+ 递增数据指针处的数据
- 递减数据指针处的数据
. 输出数据指针处的数据
, 读取输入，将数据存储在数据指针处
[ 如果指针处的数据为零，而不是将指令指针向前移动一个，则在匹配后将其跳转到命令]命令
] 如果指针处的数据非零，而不是向前移动指令指针，请在匹配]命令后将其跳回命令

https://en.wikipedia.org/wiki/Post%E2%80%93Turing_machine
    （a）标记他所在的方框（假定为空），
    （b）删除他所在的方框中的标记（假定标记为），
    （c）搬到他右边的方框，
    （d）搬到他左边的方框，
    （e）确定他所在的箱子是否有标记。


http://david.carybros.com/html/minimal_instruction_set.html
whitespace 语言

minimal CISC
说明是：

        NOP：没有操作。
        DUP：复制堆栈顶部。这是分配堆栈空间的唯一方法。
        ONE：将堆栈左上移一位，将一位移到最低位。
        ZERO：将堆栈左上移一位，将零移至最低有效位。
        LOAD：使用堆栈顶部的值作为内存地址;将其替换为引用位置的内容。
        POP：将堆栈顶部的值存储在堆栈中第二个字所引用的内存位置;弹出两个。
        SUB：从下面的值中减去堆栈的顶部值，弹出两者并推送结果。
        JPOS：如果堆栈顶部下面的单词是正数，则跳转到堆栈顶部指向的单词。无论如何，弹出两者。

http://pathlang.sourceforge.net/ path语言:
PATH程序只有一个最小的运行环境：一个无限整数数组（“存储单元”），以及标准输入和输出。程序可以输入和/或输出来自单元格的ASCII值，递增/递减单元格，在不同单元格之间进行搜索，并且如果当前单元格不等于0，则在不同方向上分支.PATH解释器从第一个“$”开始程序文件中的字符并开始向右标题，以其方式读取每个字符（或指令符号）。解释器在遇到这些有效指令符号之一时会相应地运行：

$ - 在这里启动程序，向右移动。
＃ - 结束程序。
+ - 增加当前的存储单元。
- - 减少当前的存储单元。
} - 移动到下一个存储单元。
{ - 移动到上一个存储单元。
, - 从标准输入到当前存储单元输入ASCII字符。
. - 将当前存储单元中的ASCII字符输出到标准输出。
/ - 如果当前朝向：
       右，向上
       下，向左
       左，向下
       上，向右
\ - 如果当前朝向：
       右，向下
       下，向右
       左，向上
       上，向左
^ - 如果当前存储单元的值不为0，则向上转。
< - 如果当前存储器单元的值不为0，则向左转。
>  - 如果当前存储器单元的值不为0，则向右转。
v - 如果当前存储器单元的值不为0，则向下转。
！ - 跳过下一个符号。
